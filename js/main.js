
  let html = [
    ["What does a doctype do?", "Doctype is found at the top of all documents, prevent a browser from switching into \"quirk mode\" when rendering a document."],
    ["How do you serve a page with content in multiple languages?", "UTF8 is a good way to display content in multiple languages, use the accept-language header for server-side frameworks and CMS. Use i18n modules that support multi-language content, and for the client-side, there are i18n language selectors to switch between translations."],
    ["What kind of things must you be wary of when designing or developing for multilingual sites?", "Use UTF8 because it helps support many languages. Use a lang attribute in HTML head. Allow users to change languages easily without hassle. Avoid designs where the amount of text could make or break the design, as content can be short or longer. Be mindful of how colors are perceived. Formatting dates, currencies, and language syntax."],
    ["What are data-attributes good for?", "Data-attributes allow you to make custom attributes to get your code to do exactly what you need using standard attributes. They allow for customization of elements and are commonly used in HTML elements."],
    ["Consider HTML5 as an open web platform. What are the building blocks of HTML5?", "The building blocks of HTML5 are semantics (describing content more precisely), connectivity (communicating with the server in new and innovative ways), offline & storage (storing data on the client-side locally and operating offline efficiently), multimedia (making video and audio first-class citizens in the open web), and 2D/3D graphics and effects (providing a diverse range of presentation options)."],
    ["Describe the difference between a cookie, sessionStorage, and localStorage.", "LocalStorage: Stores data with no expiration date, gets cleared only through JavaScript or clearing the browser cache. Storage limit is the largest among the three, and it can be read on the client-side. SessionStorage: Stores data only for a session, deleted when the tab or window is closed. Can survive page reloads, and it has a larger storage limit than a cookie. It can be read on the client-side. Cookie: Stores data that has to be sent back to the server with subsequent requests. Expiration varies based on the type and can be reset from either server-side or client-side. Primarily used for server-side reading but can be read on the client-side too. Size must be less than 4KB. Cookies can be made secure by setting the httpOnly flag as true. Cookies only allow you to store strings."],
    ["Describe the difference between <script>, <script async>, and <script defer>.", "<script>: Used to define a client-side script, stops rendering process and downloads and runs a script. <script async>: If async is present, the script is executed asynchronously with the rest of the page. It doesn't stop the rendering process while asynchronously downloading the script. When the download is finished, it stops rendering and runs the script. <script defer>: Tells the browser to execute the script file only after the HTML document has been fully parsed. It doesn't stop the rendering process while asynchronously downloading the script. When rendering is finished, it runs the script."],
    ["Why is it generally a good idea to position CSS <link>s between <head></head> and JS <script>s just before </body>? Do you know any exceptions?", "Placing <link> in <head> optimizes a website. HTML and CSS are parsed simultaneously, creating the DOM and CSSOM needed to create the visuals. Placing <script> before </body> allows the user to see the HTML and CSS before the functionality begins. An exception is when using `document.write()`, which is generally considered bad practice. In that case, placing the script in the <head> by using the `defer` attribute achieves the same effect of downloading and running the script after HTML is parsed."],
    ["What is progressive rendering?", "Progressive rendering is a rendering mode in which the program gradually updates small parts of the entire image, refining it from low quality to the final result. It focuses on rendering the critical content first and progressively renders non-critical content later. This concept depends on streaming HTML from the server to the client, rendering critical content without waiting for non-critical content. It increases popularity and reliability."],
    ["Why would you use a srcset attribute in an image tag? Explain the process the browser uses when evaluating the content of this attribute.", "The srcset attribute in an image tag is used to serve different images to users depending on their device width. It allows serving higher quality images to devices with retina displays, enhancing the user experience, while serving lower resolution images to low-end devices, improving performance and reducing data usage. The browser evaluates the content of the srcset attribute by determining the device's width and selecting the most appropriate image from the available options based on the provided descriptors (e.g., image width)."],
    ["Have you used different HTML templating languages before?", "Yes, there are several HTML templating languages available. Some examples include Pug (formerly Jade), EJS, Slim, Handlebars, Jinja, and Liquid."]
  ];


let css = [
    ["What is CSS selector specificity and how does it work?", "Cascading method, weight applied to the given css declaration, when multiple declarations have = specificity the las declaration found in css is applied"],
["What's the difference between \"resetting\" and \"normalizing\" CSS? Which would you choose, and why?", "Resetting: strip all default browser styling on elements, uses its internal(vuild-in) css for some html elements for e.g margins, padding, font-sizes of all elements are rest to be the same. Normalazing: normalazing preserves useful defaukt styles rather than \"styling\" everything, it corrects bugs for common browser dependecies, when doing a lot of customization / unconventional sites designs, do a reset because the default styling doesn't need to be preserved,"],
["Describe floats and how they work.", "pleces an element to the left or right of the container allowing text and inline elements to wrap around it, implies the use of block layout, css positioning property, this will affect the positioning of the elements, css clear property can be used to be positioned below left/ right / both floated elements, if a parent element contains nothing but floated elements, its height will colapse to nothing of the container, the .clearfix hack uses a clear css pseudo selector(:afer) to clear floats"],
["Describe z-index and how stacking context is formed.", "the z-index property controls the vertical stack order of elements that overlap, only affects elements that have a position value which is not static, elements stack in order that they appear in the dom, elements with non-static position will always appear on top of elements with default static positioning regardles of html hierarchy, stacking contect is an element that contains a set of layers"],
["Describe BFC (Block Formatting Context) and how it works.", "a part of visual css rendering of a web page, region which the layour of block boxes occur and in which floats interact with other elements, table cells, inline block, absolutely positioned elements, floats, the root element of the document,  a block format contect contains everything inside of the element creating it, a BFC in html box that satisfies at least one of the following: the value of float is not none, the value of position in neither static nor relative, the value of display is table-cell, table-caption, inline-block, flex, or inline-flex"],
["What are the various clearing techniques and which is appropriate for what context?", "empty div method, clearfix method, overflow: auto or overflow: hidden method - parent will establish a new block formatting contect and expand to contains its floated children, .clearfix where you need it in large projects, hidden might clip children if the children is taller than the parent and is not very ideal"], 
["Explain CSS sprites, and how you would implement them on a page or site.", "combine multiples images into the one single larger image, commnly used technique for icons, gmail uses for this system of its icons, uses a sprite generator that packs multiple images into one and generate the appropriate css for it, each img would have a corresponding css class with backgound image background position and background size properties defined, reduce the number of http request for multiple img"],
["How would you approach fixing browser-specific styling issues?", "if there is a browser that need something specific, use a separate stylesheet to adjust for the mistakes then make a note saying its for that specific browser, use libaries like bootstraps that already handle these types of styling issues, css or normalize css"],
["How do you serve your pages for feature-constrained browsers? What techniques/processes do you use?","gracefull degradation, building an app for modern broswrs while ensuring it remains functional in order browsers, progressive enhancement, making sure the base level of users experience works but adding function enhancements when a browser supports it, feature detection using modernzizer"],
["What are the different ways to visually hide content (and make it available only for screen readers)?", "visibility: hiding but making sure the elements are still on the page, width: 0x0 when you do inspect you learn that its there, position: position it outside of the screen, text-indent: -9999px; but only works for block elements, metadate: using scheme.org, rdf, and json-ld, wai-aria - a w3c technical specification that specifies how to increase the accebility of web pages"],
["Have you ever used a grid system, and if so, what do you prefer?", "float based grid stystems, it's what we use in bootstrap templates, good for positioning what you need and also making sure it's responsive"],
["Have you used or implemented media queries or mobile specific layouts/CSS?", "yes I have implemented them, it between width dimensions, helps with responsibe web desgin, best to built it using the inspect tool and hitting the different sizes on the screen to ensure it works start with the smalles screen then work you way up"],
["Are you familiar with styling SVG?", "custum vectors for application, draw it yourself and then put it on to code, the code makes it a draw option"],
["Can you give an example of an @media property other than screen?", "all: for all media type devices, print: for printers, speech: for screen readers speaks the speech, screen: computer/phone/tablet read the screen" ], 
["What are some of the \"gotchas\" for writing efficient CSS?", "browsers match selector from right to left starting with the key selector, the more selectors present for a given declariton, the browser has to do more work to determine if the parents match, use efficient css selectors: avoid a universal key selector (*)"],
["What are the advantages/disadvantages of using CSS preprocessors?", "language like SASS takes css code and makes it unique, Advantages: css is more maintainable Esasy to write more nested selectors, variables for consistent theming, makes configuration easier to read, splitting code into multiple fiels Disadvantages: requires addtional tools, re-compilation time is slow, might not be compatible with upgrades /future features"],
["Describe what you like and dislike about the CSS preprocessors you have used.", "Likes: Mostly the advantages mentioned above. Less is written in JavaScript, which plays well with Node. Dislikes: I use Sass via node-sass, which is a binding for LibSass written in C++. I have to frequently recompile it when switching between node versions. In Less, variable names are prefixed with @, which can be confused with native CSS keywords like @media, @import and @font-face rule."],
["How would you implement a web design comp that uses non-standard fonts?", "use font-face and define font family font size; use rem and set 10px in html so you can accomodate the size in long run, example: increase all font size by 20% bc older population are reading it then change the parent so you don't need to change all code and recalculate it"],
["Explain how a browser determines what elements match a CSS selector.", "checks the span / p / general attributes, then goes a step further "],
["Describe pseudo-elements and discuss what they are used for.", "allowws you to style specific part of that select element Examples: first letter in the food blog was much bigger, hover" ], 
["Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.", "visual formatting model, margin, pading, border, content area in the center and its to delineate the information and visually pleasing"],
["What does * { box-sizing: border-box; } do? What are its advantages?", "only accounting for contect size, changes how width and height are being calculated; border and padding are also included in this calculation, now it is calculated like this content's height: vertical padding + vertial border width, width of an element is now calculated by the content's width + horizontal padding + horizontal border width, take into account because helps with grid mode"],
["What is the CSS display property and can you give a few examples of its use?", "if and how an element is displayed, every element has a default display value, display: none, black, inline, inline-block, table-row, table-cell, list-item, flex" ],
["What's the difference between inline and inline-block?", "in-line block allows to set a width and height on the element; top bottom margins and padding ARE respected, inline: top, bottoms, margins, paddings are not respected"],
["What's the difference between a relative, fixed, absolute and statically positioned element?", "Relative: Positioned relative to its normal position Fixed: The element is positioned related to the browser window  A fixed position element is positioned relative to the viewport, or the browser window itself; so it stays in the same spot even if the page is scrolled  Example: left side bar is fixed  Absolute: The element is positioned absolutely to its first positioned parent  Static:  Default position. The top right bottom left and z index wont apply Positioning does not cascade so this is a bad choice  "],
["What existing CSS frameworks have you used locally, or in production? How would you change/improve them?", "Bootstrap: Slow release cycle Latest version has been around for 2 years, so update it quick  Add a spinner button component since we have to code it in  Options to tweak things in layouts Html 5  Semantic UI  Source code structure makes theme customization extremely hard to understand. Hardcoded config path w/ vendor library  Bulma Upgrading versions breaks the app in subtle manners  A lot of non-semantic classes and markup are required  Not backward compatible"],
["Have you played around with the new CSS Flexbox or Grid specs?", "yes, flex box = 1 dimensional layouts and grid is for 2 dimensional layouts flexbox solves a lot of problems; boostrap and bulma use this, good at stacking vertically, grid more intutive approach for creating grif based layouts but not a wide support in browsers"],
["Can you explain the difference between coding a web site to be responsive versus using a mobile-first strategy?", "mobile first: designing FIRST for your phone, making sure its responsive and making content decision then moving up, 2 advantages, write cleaner code, maes it easier to write media queries, Responsive: looks good on all screes, some elementes adapting to size and functionality"],
["How is responsive design different from adaptive design?", "responsive desgin: CSS responsive web design, flexinble and adjust to the screen size of the user interface, flexbox and grid and media queries, adaptive desgin: can only work on as many screens as the layouts do, selects what features can be featured based on the viewport,  media queries" ],
["Have you ever worked with retina graphics? If so, when and what techniques did you use?", "High resolution screen with a pixel retion bigger than 1 , use high resolution images, Responsive images making different resolutions of the same files of the same images to the browser and let it decide which image is best"],
["Is there any reason you'd want to use translate() instead of absolute positioning, or vice-versa? And why?", "translate is a value of css transform,  changing transform or opacity does not trigger browser reflow or repaint but doesnt trigger composition, tranlate is more effient and will result in short pain times of smoother animations"],
];

let js = [
["Explain event delegation", "firing an event listener to perform a task, fire an event listener to then respond with something you are trying to ge it to do, code each event listener with an id, so that way you can customize it, data attributes are also super helpful for this bc there isn't an element attributes for everything so it's a way to customize the event/ function / performance of that function you want"],
["Explain how this works in JavaScript", "refers to an invoker object which is the parent object, the property of an object can be a method or a simple value when the property of an object is invoked, then this refers to the object which contains the method being invoked"],
["Explain how prototypal inheritance works", "an object can point to another object and inherit all its properties, main purpose is to allow multiple instances of an object to share common properties, hence the singleton pattern, simulates classical inheritance but it is more of a delagation"],
["What do you think of AMD vs CommonJS?", "Both are ways to implement and module system: AMD: asyschronous module definition, loads asynch, Common JS: loads the common route; much better because it's a common api for js"],
["Explain why the following doesn't work as an IIFE: function foo(){ }();. What needs to be changed to properly make it an IIFE?", "immediately invoked function expression, have a declaration and a letter but nothing specific is called so it throws an uncaught syntax error, add() around function so it's a function"],
["What's the difference between a variable that is: null, undefined or undeclared? How would you go about checking for any of these states?","undeclare = used but never declare, undefined = declare but no valur, null = value is null, = = good wat to check" ],
["What is a closure, and how/why would you use one?", "used in module patterns and data pravacy, combination of function and lexical environment"],
["Can you describe the main difference between a .forEach loop and a .map() loop and why you would pick one versus the other?", "forEach: iterates through each element of the array, executes a callback, Map Loop: iterates through the elemen in the array, it maps each element to new element by callling the function on each element which ultimately creates a new array"],
["What's a typical use case for anonymous functions?", "higher order functions, only use it once or a couple times at most, this what you would use "],
["How do you organize your code? (module pattern, classical inheritance?)", "Object Oriantation Programming approach"],
["What's the difference between host objects and native objects?", "Host obj: provided by the runtime enviroment, window, the object was recognized by my javascript, ejs and my server, ex: window.popsicle in js and ejs and node,itll recognize it and be consistent. Native Obj: stardad in built object by js, this ca ne the global object, Strings, Math and functions can be used as constructors for the object "],
["Difference between: function Person(){}, var person = Person(), and var person = new Person()?", "function Person(){}, Function declaration: code above declares a function statement( statements perform an action but does not execute, however it does get regisred into the global namespace, var person = Person() function expression, a variable \"var person\" has been defined and contains a value refernece to a person function. any javascript expressions(including functions expressions) always returns a value. this may also be an anonymous function if no name has been assign to a function but wrapped in parenthesis to be interpreted as an expression. var person = new Person() Function constructor, by adding the keyword \"new\" we are instatiating a new object of the Person class constructor. A function declaration is just a regular function unless it has been instatiated, it the becomes a class contructor."],
["What's the difference between .call and .apply?", ".call, sperated arguments .apply takes in the array as arguments Both invoked functions"],
["Explain Function.prototype.bind.", "this is when you used a prototype to guide you to get exact data we need, then you extrapolate the data and \"bind\" it onto the page, sequence of info to tget you the function needed, it is most usefull for bindind the values of this in methods of classes that you want to pass into other functions, example: doing an api week 5: we wanted to pull out the nasa data and so we had to use dot notation to ger to the end of the data to then pull it out and bind it onto the page fot the client so they can see it"],
["When would you use document.write()?", "primarily used for testing if it is used after all HTML, it will delete all the HTML, it overrides iteams in body and head, f it isn't for testing used to write some text to an output stream opened by document.open() method"],
["What's the difference between feature detection, feature inference, and using the UA string?", "Feature Detection: seein if a feature can be fun, feature inference: using a similar function that should produce the same results, UA string: running a code that needs to be paresed and see if a feature can be run; the string is browser specific"],
["Explain Ajax in as much detail as possible.", "sends and receives information asynchronously; gives uses better interactice experiences, a user interaction in th ebrowser triggers the event, such as a button click, this create and AJAx request, browsers use the XMLHttpRequest object. When the server responds to the browser's request, the same XMLHttp Request Object will process the result. The server-side script receives the input from javascript and processes the data" ],
["What are the advantages and disadvantages of using Ajax?", "Ajax means asynch javascript and the XML package, better interconnectivity, more complex, state can be maintened, disadvantages: hard to book mark and load"],
["Explain how JSONP works (and how it's not really Ajax).", "JSON with padding, way to send JSON data without issues /accross without problems"],
["Have you ever used JavaScript templating? If so, what libraries have you used?", "No, but i know that there are ways to do it like angular Js, heavy use of strings"],
["Explain \"hoisting\".", "variables gets hosted up (moved to the top) and assigment satays where it is"],
["Describe event bubbling.", "event is triggered tries to exevute it then it bubbles up to the parent"],
["What's the difference between an \"attribute\" and a \"property\"?", "attribute = referring to addional information of an object, Property = describing the characteristics of an object. Most people use these two words as asynonyms."],
["Why is extending built-in JavaScript objects not a good idea?", "break, using the prototype, modifiying the behavior of current built-in Js objects is not a good practice as it breaks its default, functionality and it will break your code using that specific built in js object method or property"],
["Difference between document load event and document DOMContentLoaded event?", "the DOMContent Loaded event is fired when the docuemt has beencompletely load and parsed without waiting for stylesheet, images and subframes to finish loading(the load event can be used to detect a fully loaded page)"],
["What is the difference between == and ===?", "= means assignment, == null and undefined will produce a true or false compariasion but can use triple for this... so you never use doubke,  ===  menas are use for comparison purposes, booleans are an example in our functions"],
["Explain the same-origin policy with regards to JavaScript.", "the same-origin policy is a critical security mechanism that restricts how a domcument or script loaded from one origin can interact with resources from another origin. it helps isolate potentially malicious documents, reducing posible attack vectors"],
["Make this work: duplicate([1,2,3,4,5],); // [1,2,3,4,5,1,2,3,4,5],", "Do it on jsbin"],
["Why is it called a Ternary expression, what does the word \"Ternary\" indicate?", "The name ternary refers to the fact that the operator takes three operands. condition ? exprTrue : exprFalse"],
["What is \"use strict\";? what are the advantages and disadvantages to using it?", " If you put use strict; at the top of your code (or function), then the JS is evaluated in strict mode. Strict mode throws more errors and disables some features in an effort to make your code more robust, readable, and accurate. Advantages It catches some common coding bloopers, throwing exceptions. It prevents, or throws errors, when relatively “unsafe” actions are taken (such as gaining access to the global object). It disables features that are confusing or poorly thought out."],
["Create a for loop that iterates up to 100 while outputting \"fizz\" at multiples of 3, \"buzz\" at multiples of 5 and \"fizzbuzz\" at multiples of 3 and 5", "do it in jsbin"],
["Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?", "because it is used in multiple files so if it is adjusted it could mess up the renderinf of another page, global variables look like the are pulled out of thin air" ],
["Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?", "The load event fires at the end of the document loading process. At this point, all of the objects in the document are in the DOM, and all the images, scripts, links and sub-frames have finished loading. The DOM event DOMContentLoaded will fire after the DOM for the page has been constructed, but do not wait for other resources to finish loading. This is preferred in certain cases when you do not need the full page to be loaded before initializing"],
["Explain what a single page app is and how to make one SEO-friendly.", "SEO stands for search engine optimization H1 and H2 are relevant and targets the concept  Accessibility  the alt tag gives description of image which is a good way to get the user to be able to understand what they need from their search  SPA stands for single page app Websites are called web apps now  dynamic and more interactive than ever before Download the html, css, and js  once everything is download it does an \“update\”, then dynamically updates the page Example: CRUD app for 21 savage, eveerytime there was a like given, the page had to “update” Benefits: App feels more responsive Fewer HTTP requests are made to the server bc it’s a single page Make sure API is good to go "],
["What is the extent of your experience with Promises and/or their polyfills?", "It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future. A Promise is in one of these states: pending: initial state, neither fulfilled nor rejected. fulfilled: meaning that the operation was completed successfully. rejected: meaning that the operation failed. "],
["What are the pros and cons of using Promises instead of callbacks?", "Here are the pros of using promises over callbacks: Better defined and organized control flow of asynchronous logic. Highly reduced coupling. We have integrated error handling. Enhanced readability. Cons of using Promises over callbacks: It kills the purpose of asynchronous non-blocking I/O. Only one object can be returned. We cannot return multiple arguments."],
["What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?", "Advantages: Less code bc the other language has the ability to compile into JS  shorter code Classes, inheritance and types are able to be converted, might need to be tweaked but it works Doing the same thing but EMITTING JS Disadvantages: If anything needs to be tweaked / debug / added / built and compile processes, it’ll take a lot more effort  Not all engineers would know that random language used, so using JS is reliable when working on a team "],
["What tools and techniques do you use debugging JavaScript code?", "console.log"],
["What language constructions do you use for iterating over object properties and array items?", "for loop, for..in, for each..in, map, reduce etc"],
["Explain the difference between mutable and immutable objects.","A mutable object can be changed after it's created, and an immutable object can't. That said, if you're defining your own class, you can make its objects immutable by making all fields final and private. Strings can be mutable or immutable depending on the language." ],
["Explain the difference between synchronous and asynchronous functions.", "Synchronous way: It waits for each operation to complete, after that only it executes the next operation. For your query: The console.log() command will not be executed until & unless the query has finished executing to get all the result from Database. Asynchronous way: It never waits for each operation to complete, rather it executes all operations in the first GO only. The result of each operation will be handled once the result is available. For your query: The console.log() command will be executed soon after the Database.Query() method. While the Database query runs in the background and loads the result once it is finished retrieving the data." ],
["What is event loop? What is the difference between call stack and task queue?", "Event Loop has pretty specific work. It has the responsibility to see whether the call-stack is empty and does the task queue contains pending tasks to process. If the call-stack is empty, it will push the task to the call-stack from the queue and the task gets processed." ],
["Explain the differences on the usage of foo between function foo() {} and var foo = function() {}", "First is an actual named function Second is a regular variable declaration with an anonymous function attached to it"],
["What are the differences between variables created using let, var or const?", "var variables can be updated and re-declared within its scope; let variables can be updated but not re-declared; const variables can neither be updated nor re-declared. " ],
["What are the differences between ES6 class and ES5 function constructors?", "ES6 class allows the developers to instantiate objects using the new operator. ES5 function constructors focus on how the objects are instantiated. They also ensure the developer that this keyword which is basically used inside the class only refers to the object that is being created by the developer."],
["Can you offer a use case for the new arrow => function syntax? How does this new syntax differ from other functions?", "it’s much shorter! We are able to omit the curly braces and the return statement due to implicit returns (but only if there is no block — more on this below)"],
["What advantage is there for using the arrow syntax for a method in a constructor?", "Use function in the global scope and for Object.prototype properties. Use class for object constructors. Use => everywhere else."],
["What is the definition of a higher-order function?", "A higher order function is a function that takes a function as an argument, or returns a function."],
["Can you give an example for destructuring an object or an array?", "ES6 Extracts values of objects / arrays and places them into distinct variables  Example: [apple, spinach, banana, 12, clouds],"],
["ES6 Template Literals offer a lot of flexibility in generating strings, can you give an example?", "`string text` `string text line 1 string text line 2` `string text $ { expression} string text`tag`string text $ { expression } string text`"],
["Can you give an example of a curry function and why this syntax offers an advantage?", "const sum = x => y => x + y;returns the number 3 sum (2)(1); returns a function y => 2 + y sum (2); Note that sum (2)(1); produces the same result that we would get, if we had defined it as const sum = (x,y) => x + y;, which we would call as sum (2, 1);"],
["What are the benefits of using spread syntax and how is it different from rest syntax?", "look for this question "],
["How can you share code between files?", "Using the window/global object  Writing code: window._____     Server side (node) we use common JSEach file is treated as a module and it can export variables "],
["Why you might want to create static class members?", "The static keyword defines a static method or property for a class. Neither static methods nor static properties can be called on instances of the class. Instead, they're called on the class itself. Static methods are often utility functions, such as functions to create or clone objects, whereas static properties are useful for caches, fixed-configuration, or any other data you don't need to be replicated across instances"],
];

let jsGeneral = [
["Can you name two programming paradigms important for JavaScript app developers?", "js is a multi-paradigm language supporting imperative/procedural programming, OOP, procedural programming, parallel processing"],
["What is functional programming?", "produces programs by composing mathematical functions and avoids shared state and mutable data, declarative rather than imperative, and application state flows through pure function"],
["What is the difference between classical inheritance and prototypal inheritance?", "Classical inheritance: hierarchal, strticly inheriting classes and subclases, inherit from the parent/ grandpared objects, instantied by constructor functions, prototypal inheritances: inherits directly from other objects, when you clone an object, use one of those oop linkig methods, Object.create(), use dot notations, example from week 8 doing api using the prototype to know exactly what information to pull out"],
["What are the pros and cons of functional programming vs object-oriented programming?", "OOP Pros Has four pillars that work together Easy to understand and interpret the meaning of the method calls Imperative style vs declarative style, which reads like a set of instructions for the computer to follow OOP Cons Depend on a shared state  objects and behaviors are typically bound together So if you create a new object, that would inherit an existing object…. Then it won’t work if the existing object is removed Therefore, it is dependent on parent and the preceding levels about it like classes Functional Pros Build pure functions with no side effects – so not dependent on other things Whatever you code is what you code, and it doesn’t inherit from classes Functional Cons Lacks readability Not optimal Newer paradigm; find documentation and information on the OOP approach  Definition of paradigm: a typical pattern of something, typically based on their features"],
["What are two-way data binding and one-way data flow, and how are they different?", "Two-way data binding UI fields are bound to model data dynamically such as that when  a UI field changes, the model data changes with it Have the same data in Model and View One-way data flow The model is the single source of truth Data flows in a single direction, which makes it easier to understand "],
["What is asynchronous programming, and why is it important in JavaScript?"], 
]

let node = [ ["What is Node.js? Where can you use it?", "back end language /server side, packed compilation of google's V8 JS engine, a way to write the entire web in one language since its linked with javascript"],
["Why use Node.js?", "fast, effient, scalable, event driving, no i/o blocking, asynchronous, same language between front end and back end" ],
["What are the features of Node.js?", "Asynchronous and event driven, super fast -sicnce its built on google's v8 engine, single threaded but hughly scalable"],
["How do you update NPM to a new version in Node.js?", "runs scripts, npm -v to see which version i have, then npm install npm @latest -g, nnpm -v gain to see it is updated correctly"],
["Why is Node.js Single-threaded?", "single threaded for asynchronous processing, more performance and more scalability can be achieve as opposed to typical thread-based loads"],
["Explain callback in Node.js.", "callback functions is called at the completion of a given task, this allows other code to be run in the meantime and prevents any blocking, since this platform is asynchronous, node.js, heavily relies on callback"],
["What is callback hell in Node.js?", "heavily nested callbacks make the conde unreadable and diffucult to debug"],
["How do you prevent/fix callback hell?", "hanfle every error, keeping your code shallow, split the callbacks into smaller independet functions that can be called with some parameters then joining them to achieve desire results"],
["Explain the role of REPL in Node.js.", "read evaluated print and loop, used to execute js staments when necessary, for the purpose of testing, debugging or experimenting, REPL"],
["Name the types of API functions in Node.js.", "Blocking functions: all other code is blocked from executing until I/O event occurs, synchronous. Nonblocking functions: mutiple I/O can be performed without execution of the program being stopped, asynchronous"],
["What are the functionalities of NPM in Node.js?", "Online repository for Node.js packages, install package, version management and dependecy management of node.js packages"],
["What is the difference between Node.js and Ajax?", "node's goal is for develop client-server apps, ajax is desgined for dynamically updating a particular section of a page's content without hanging to update the entire page"],
["What are “streams” in Node.js? Explain the different types of streams present in Node.js.", "streams are object that allows the reading of data from its source and writing of data to the destination, four types of streams: readable - faciliates the reading operation, writeable: facilates the writing operation, duplex - facilitates both reading and writing operations, transform - performs computations bases on the avaible input"],
["Explain chaining in Node.js.", "linking together a chain of multiple strams operations, output of one stram is connected to another stream creates a chain"],
["What are Globals in Node.js?", "Global: represents the global names object and acts as a container for all other global objests, processs: turn a synchronous function into an async callback, can be assessed anywhere in the code and it primarily gives back information about the application or environment, buffer: it is a class in node.js to handle binary data"],
["What is Event-driven programming?", "Instead of using a return value you define functions that are called when events occur – or asynchronous programming"],
["What is Event loop in Node.js work? And How does it work?", "One thread running inside one process  therefore the event will happen without interruption The event loop handles all the sync call backs  essentially we add event listeners so when the on click / event listener is fired then we execute the call back function Definition of I/O Operations: Any program, operation or device that transfers data to or from a computer and to or from a peripheral device. Every transfer is an output from one device and an input into another Definition of Callback Function: A function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine / action "],
["What is the purpose of module.exports in Node.js?", "Instructions that tell Node.js which bits of code(functions, objects, strings, etc) to “export” from a given file so other files are allowed to access the exported code"],
["What is the difference between Asynchronous and Non-blocking?", "Asynchronous We are not waiting for the server response Refers to event / data is handled(not synchronously) Non-blocking Refers to control flow(doesn’t block)"],
["What is Tracing in Node.js?", "Tracing provides a mechanism to collect tracing information generated by V8 engine, Node core + userspace code in a log file"],
["How will you debug an application in Node.js?", "An engine built to increase performance and execution for JS inside web browsers What google uses"],
["Difference between setImmediate() vs setTimeout()?", "There is a tool called “debugger” To enable it, start in node.js, place it debugs as an argument followed by the path to the script to debug"],
["What is process.nextTick()", "If you execute a function and you have a set timeout  itll start running in the que Set immediate  executes a script after the event loop is complete"],
["What is package.json? What is it used for?", "Taking a callback function which is executed after completing the current iteration / tick of the event loop We use it to cleanup unwanted resources"],
["What is libuv?", "Multi-plattform library with a focus on asynchronous I/O Primarily developed for Node.js Features: Aynsc file and file system operations Child processes File system events"],
["What are some of the most popular modules of Node.js?", "Express CRUD apps Rapid development of node based web apps Async Powerful functions for aynsc JS. Installed via npm Browserify Bundles up all of my dependencies What is EventEmitter in Node.js?"], 
];

let csTheory =[
["What is recursion and give an example using javascript?", "iterating over an operation by having a function call itself repeatedly until it arrives at a result, example: is a fibonacci sequence and heaps"],
["What are types?", "Javascript 5 primative types: booleands, null, undefined, strings, numbers, Javascript has two reference types: reference values aka object property string/ value method value is in a function, arrays"],
["What are data structures?", "the way we store and retrieve data, Example: arrays and objects, input, process, maintain, and retrieve info, organize data and extrapolate that data; organization management and store format that enableseffieienct acces and modification"],
["What is an algorithm? ", "step by steo intructions telling the computer exactlu what you need it to do and how to excecute it, well define procedure that allows a computer to solve a problem, scope determines where varibles, function, and object are accesible in your code durting runtime"],
["What is scope / lexical scope in javascript? ", "Scope:Determines where variables, functions, objects are accessible in my code during runtime This is determined through the location which is global and local objects Lexical Scope: ES6 Resolves how variable names are resolved in nested functions: inner functions contain the scope of parent functions even if the parent function has returned"],
["What is polymorphism?", "Object takes on many different forms So if you do a google search for ice cream you get a ton of results among info, images, shopping, locations maps "],
["What is encapsulation? ", "Hide the internal state of an object Uber hides data, but can pinpoint location and get the uber driver to you"],
["What is a Linked List", "Stores data with nodes that point to other nodes Nodes has one datum and one reference (another node) A linked list chains nodes together by point one node’s reference towards another node"],
["What is a Doubly Linked List", "Have nodes reference previous nodes"],
["What is a Queue", "Implemented with a link list or an array First in, first out  use the data"],
["What is a Stack", "Data structure + a container of objects that are added and removed according to the last- in-first-out motto Only add and remove at the top"],
["What is a Hash Table", "Data structure associating key and values Horoscope with sam"],
["What is a Heap", "Tree based structure that satisfies the heap property Example of recursive Max heap: parent node > child node Min heap: parent node < child node"],
["What is a Trie", "Search tree Structure the nodes in a particular way, words and strings can be retrieved from the structure by traversing down a branch path of the tree" ],
["What is a Tree", "Simulates a hierarchal tree with parent nodes, root nodes, children nodes, subtrees It’s a way to formulate data structures to then ultimately abstract data"],
["What is a Binary Search Tree", "Bi = 2 So left and right subtrees; both must be a binary search tree Left subtree of a node = nodes with keys < than node’s keys Right subtree of a node = nodes with keys > than node’s key"],
["What is a Disjoint Set", "A data structure that tracks a set of elements partitioned into a number of non-overlapping subsets. Disjoint means not together….. think of joints in anatomy and physio and the purpose of that"],
["What is a Bloom Filter", "Data structure designed to tell you, quickly and memory-efficiently, whether an element is present in a set Browsers use them to detect malicious websites DB use them to avoid searching for non-existent data"],
["Demonstrate Bubble Sort and explain when you might use it?", "Sorting algorithm Repeatedly comparing pairs of adjacent elements & then swapping their positions if they are in the wrong order Example: First Pass: ( 5 1 4 2 8 )  ( 1 5 4 2 8 ); Here, algorithm compares the first two elements, and swaps since 5 > 1."],
["Demonstrate Insertion Sort and explain when you might use it?", "Comparison sort for sorting an array with the values in it, to other values within that SAME array/list that is being sorted"],
["Demonstrate Merge Sort and explain when you might use it?", "Splits unsorted array into two parts Then it keeps splitting it till you hit single elements"],
["Demonstrate Quicksort and explain when you might use it?", "Pick an element in the array, label it as pivot Rest of elements in array split into two categories Then they are either < or > than the pivot"], 
];



let questionsAnswer = [...html, ...css, ...js, ...jsGeneral, ...node, ...csTheory];

// Function to display a random question and answer
function displayRandomQuestion() {
    // Generate a random index within the range of the questionsAnswer array length
    const randomIndex = Math.floor(Math.random() * questionsAnswer.length);
  
    // Retrieve the question and answer at the random index
    const [question, answer] = questionsAnswer[randomIndex];
  
    // Create HTML elements for the question and answer
    const questionElement = document.createElement("h2");
    questionElement.textContent = question;
  
    const answerElement = document.createElement("p");
    answerElement.textContent = answer;
    answerElement.style.display = "none"; // Initially hide the answer
  const buttonClick = document.querySelector("#answer")
    // Toggle the display of the answer when the question element is clicked
    buttonClick.addEventListener("click", () => {
      if (answerElement.style.display === "none") {
        answerElement.style.display = "block";
      } else {
        answerElement.style.display = "none";
      }
    });
  
    const refreshPage = document.querySelector("#refresh")

    refreshPage.addEventListener("click", () => {
window.location.reload()
    })
    // Get the container element from the DOM
    const container = document.getElementById("qaContainer");
  
    // Clear the container before appending new elements
    container.innerHTML = "";
  
    // Append the question and answer elements to the container
    container.appendChild(questionElement);
    container.appendChild(answerElement);
  }
  
  // Call the function to display a random question and answer initially
  displayRandomQuestion();



